#!/usr/bin/env python
# coding: utf-8

# In[4]:


#the function conn checks if the colourings are connected in the reconfiguration graph, where colourings are just lists 
#with the consecutive colours used
def conn(L,K):
    counter=0
    for i in range(0,len(L)):
        if L[i]==K[i]:
            counter+=1
    if counter==len(L)-1:
        return(True)
    else:
        return(False)


# In[5]:


#Here we choose the values of k and n
k=3
n=5
#the graph L_n equals K_{n,n} without a matching
dict={}
for j in range(0,n):
    dict[j]=list(range(n,n+j))+list(range(n+j+1,2*n))
Ln= Graph(dict)


# In[6]:


#All k-colourings of the graph Ln generated by Sage 
Col=list(sage.graphs.graph_coloring.all_graph_colorings(Ln, k, count_only=False, hex_colors=False, vertex_color_dict=False))


# In[7]:


#The k-colourings are converted to lists, these form the vertex set of the graph
V=[]
for i in range(0,len(Col)):
    M=[0]*(2*n)
    for j in Col[i].keys():
        for s in Col[i][j]:
            M[s]=j
    V.append(M)


# In[8]:


#Construction of the graph C_k(Ln)
G = Graph()
G.add_vertices(range(0,len(V)))
for i in range(0,len(V)-1):
    for j in range(i+1,len(V)):
        if conn(V[i],V[j]):
            G.add_edge(i,j)


# In[9]:


#check hamiltonicity of the reconfiguration graph C_k(L_n), plausibly even with explecit cycle
print(G.is_hamiltonian())
#show(G.hamiltonian_cycle())





